Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i.		Attribute table 	= 10,000
ii.		Business table 		= 10,000
iii.	Category table 		= 10,000
iv. 	Checkin table 		= 10,000
v. 		elite_years table	= 10,000
vi. 	friend table 		= 10,000
vii. 	hours table 		= 10,000
viii. 	photo table 		= 10,000
ix. 	review table 		= 10,000
x. 		tip table 			= 10,000
xi.		user table 			= 10,000


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i.		Business 	= 10,000	(Id)
ii. 	Hours 		= 1,562 	(Business_Id)
iii. 	Category 	= 2,643		(Business_Id)
iv. 	Attribute 	= 1,115		(Business_Id)
v. 		Review 		= 10,000	(Id)
vi. 	Checkin 	= 493 		(business_id)
vii. 	Photo 		= 10000		(id)
viii. 	Tip 		= 537		(user_id)
ix. 	User 		= 10000		(id)
x. 		Friend 		= 11		(user_id)
xi. 	Elite_years = 2780		(user_id)


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

	select *
		from  user
		where 	id is null
				or name is null
				or review_count is null
				or yelping_since is null
				or useful is null
				or funny is null
				or cool is null
				or fans is null
				or average_stars is null
				or compliment_hot is null
				or compliment_more is null
				or compliment_profile is null
				or compliment_cute is null
				or compliment_list is null
				or compliment_note is null
				or compliment_plain is null
				or compliment_cool is null
				or compliment_funny is null
				or compliment_writer is null
				or compliment_photos is null;


4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0		max: 5.0		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2,000		avg: 24.2995


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	SELECT City, SUM(review_count) AS Most_Reviewed
	FROM Business
	GROUP BY City
	ORDER BY Most_Reviewed DESC;
	
	
	Copy and Paste the Result Below:

+-----------------+---------------+
| city            | Most_Reviewed |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+



6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT Stars As [Star Rating], Count(Stars) As Count
FROM Business
WHERE City = 'Avon'
GROUP BY Stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| Star Rating | Count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT Stars As [Star Rating], Count(Stars) As Count
FROM Business
WHERE City = 'Beachwood'
GROUP BY Stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| Star Rating | Count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+



7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

	SELECT name, review_count AS [Top 3 Review Count]
	FROM User
	ORDER BY review_count DESC
	Limit 3;
	
		
	Copy and Paste the Result Below:

+--------+--------------------+
| name   | Top 3 Review Count |
+--------+--------------------+
| Gerald |               2000 |
| Sara   |               1629 |
| Yuri   |               1339 |
+--------+--------------------+


8. Does posing more reviews correlate with more fans?
   ANSWER: No

	Please explain your findings and interpretation of the results:

	Explanation: 	The code and the result below shows the total numbers of the first 20 Users with the highest
					numbers of reviews with their corresponding numbers of fans. There is neither a positive or 
					negative correlation between review count
					with the numbers of fans because our result shows that larger review count does not guarantee 
					more fans and vice versa just like in the case of the user: Sara having a review count of 
					1,629 but only has 50 fans compared with the User: Mark who has a review count of 861 but
					have 115 fans which is more than Sara's. This is just one example, there are many similar ones
					if you observed the Result table below.


Code: 

SELECT name, review_count, Fans
FROM User
ORDER BY review_count DESC
Limit 20;


Result:

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
+-----------+--------------+------+


	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: More reviews are with the word 'love' which is having 1,780 reviews
			compared to the word 'hate' which is having only 232 reviews.

	
	SQL code used to arrive at answer:

	SELECT (SELECT COUNT(text)
	FROM review
	WHERE text like '%love%') AS Love_count,
	(SELECT COUNT(text)
	FROM review
	WHERE text like '%hate%') AS Hate_count

	RESULT:

+------------+------------+
| Love_count | Hate_count |
+------------+------------+
|       1780 |        232 |
+------------+------------+



10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	SELECT name, Fans
	FROM User
	ORDER BY Fans DESC
	Limit 10;

	
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+





Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours? 
	YES. I choose Phoenix as City and Restaurants as Category I observed that those businesses with longer working hours
	(That is, More than 13 working hours) tend to have low star ratings which is the case
	for the first two groups of businesses which has a rating of 2 and 3 stars. While the businesses 
	with lesser hours (that is, less than 13 hours working hours) have high star ratings between 3 to 5 stars.


ii. Do the two groups you chose to analyze have a different number of reviews? YES. For the first four businesses,
	the number of reviews has a strong correlation with the number of star ratings. that is, the higher
	the number of reviews, the higher the ratings. Except for the last review which does not have such 
	correlation and can be treated as an outlier. 
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain. 
	YES. I observed that if two or more businesses have their businesses close to each other, then the
	business with longer woking hours tend to have low star ratings compared to the location
	with fewer working hours. For example, businesses with postal codes 85004 and 85008 are in closeer 
	location to each other. The business with the postal code 85004 have longer working hours thereby
	having a low star rating compared to the business with postal code 85008 having lesser working hours
	and thereby having higher ratings. 


SQL code used for analysis:

SELECT
b.name
, b.city
, c.category
, b.stars
, h.hours
, b.review_count
, b.postal_code

from (business AS b 
INNER JOIN category AS c 
ON b.id = c.business_id)
INNER JOIN hours AS h
ON h.business_id = c.business_id
WHERE b.city = 'Phoenix' AND c.category = 'Restaurants'
GROUP BY b.stars;


RESULT:

+----------------------------------------+---------+-------------+-------+----------------------+--------------+-------------+
| name                                   | city    | category    | stars | hours                | review_count | postal_code |
+----------------------------------------+---------+-------------+-------+----------------------+--------------+-------------+
| McDonald's                             | Phoenix | Restaurants |   2.0 | Saturday|5:00-0:00   |            8 | 85004       |
| Gallagher's                            | Phoenix | Restaurants |   3.0 | Saturday|9:00-2:00   |           60 | 85024       |
| Five Guys                              | Phoenix | Restaurants |   3.5 | Saturday|10:00-22:00 |           63 | 85008       |
| Bootleggers Modern American Smokehouse | Phoenix | Restaurants |   4.0 | Saturday|11:00-22:00 |          431 | 85028       |
| Charlie D's Catfish & Chicken          | Phoenix | Restaurants |   4.5 | Saturday|11:00-18:00 |            7 | 85034       |
+----------------------------------------+---------+-------------+-------+----------------------+--------------+-------------+



2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Businesses that are Open have more review count than those that are closed.
				sum of review count for open businesses = 269,300
				sum of review count for closed businesses = 35,261 
         
         
ii. Difference 2: Businesses that are Open have more Average Star rating than those that are closed.
					Average Star Rating for Open businesses = 3.67
					Average Star Rating for Closed businesses = 3.52
         
         
         
SQL code used for analysis:

SELECT  COUNT(DISTINCT(id))
       , SUM(review_count)
       , AVG(stars)
       , AVG(review_count)
       , is_open
FROM business
GROUP BY is_open;



3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
	Among these four categories with 5 Star Ratings: 'Professional Services', 'Shopping', 'Restaurants', 'Food'
	We want to Analyze to see the category with the highest number of 5 star rating and in what city does it
	operate often. This will inform any business owner who want to go into similar business to see the locations that
	are well suited for the business.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
	The category, city, stars and review count are the data I will be using for my Analysis because due to 
	the limited data we have in the YELP database, this is the best so far for my analysis
                           
                  
iii. Output of your finished dataset:
+------------------------+-------------+------------+-------+--------------+
| id                     | category    | city       | stars | review_count |
+------------------------+-------------+------------+-------+--------------+
| -Ltt5wvYnuqOUPnzSUBLdg | Shopping    | Middleton  |   5.0 |            8 |
| -cLMYLmmXwomTMMuDHA1Yg | Food        | Oakville   |   5.0 |            7 |
| 0oDfGJPbqdSigRwIFM-RoQ | Shopping    | Chandler   |   5.0 |            4 |
| 0t2yPpsbObqxB8PRyLRUhg | Shopping    | Pittsburgh |   5.0 |            8 |
| 13eX63udIlRK8NNF0EnwAQ | Restaurants | Charlotte  |   5.0 |            4 |
| 16d3BlncEyCTzb0GxXrBXQ | Restaurants | Mesa       |   5.0 |          267 |
| 1N6_FgS6nq5eT_3x4MXm4A | Food        | Phoenix    |   5.0 |            4 |
| 1hlwL5E035WQfB7Zb2mLUw | Shopping    | Chandler   |   5.0 |            7 |
| 2RhICgMZI6DK-t374VRoow | Shopping    | Las Vegas  |   5.0 |            4 |
| 2YmDZid3sYULrT60sRjuhA | Food        | Chandler   |   5.0 |            5 |
+------------------------+-------------+------------+-------+--------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT b.Id, c.category, b.city, b.stars, b.review_count
FROM business b
INNER JOIN category AS c
ON b.Id = c.business_Id 
WHERE c.category IN ('Professional Services', 'Shopping', 'Restaurants', 'Food')
GROUP BY b.Id
ORDER BY stars DESC
LIMIT 10;